// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: notification.sql

package sqlc

import (
	"context"
	"time"
)

const deleteNotification = `-- name: DeleteNotification :exec
DELETE FROM 
    notification
WHERE 
    id = $1::BIGINT
`

func (q *Queries) DeleteNotification(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteNotificationStmt, deleteNotification, id)
	return err
}

const getLastNotificationMessage = `-- name: GetLastNotificationMessage :one
SELECT 
    message::VARCHAR
FROM
    notification    
ORDER BY id DESC
LIMIT 1
`

func (q *Queries) GetLastNotificationMessage(ctx context.Context) (string, error) {
	row := q.queryRow(ctx, q.getLastNotificationMessageStmt, getLastNotificationMessage)
	var message string
	err := row.Scan(&message)
	return message, err
}

const insertNotification = `-- name: InsertNotification :one
INSERT INTO notification (
    message, 
    first_driver, 
    second_driver, 
    third_driver, 
    license_points, 
    created_date
) VALUES (
    $1::VARCHAR, 
    $2::VARCHAR,
    $3::VARCHAR,
    $4::VARCHAR,
    $5::INTEGER,
    $6::TIMESTAMP
) RETURNING id
`

type InsertNotificationParams struct {
	Message       string
	FirstDriver   string
	SecondDriver  string
	ThirdDriver   string
	LicensePoints int32
	CreatedDate   time.Time
}

func (q *Queries) InsertNotification(ctx context.Context, arg InsertNotificationParams) (int64, error) {
	row := q.queryRow(ctx, q.insertNotificationStmt, insertNotification,
		arg.Message,
		arg.FirstDriver,
		arg.SecondDriver,
		arg.ThirdDriver,
		arg.LicensePoints,
		arg.CreatedDate,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectListNotifications = `-- name: SelectListNotifications :many
SELECT 
    id::BIGINT, 
    message::VARCHAR, 
    first_driver::VARCHAR, 
    second_driver::VARCHAR, 
    third_driver::VARCHAR, 
    license_points::INTEGER, 
    created_date::TIMESTAMP
FROM
    notification
OFFSET $1::INTEGER
LIMIT $2::INTEGER
`

type SelectListNotificationsParams struct {
	Column1 int32
	Column2 int32
}

type SelectListNotificationsRow struct {
	ID            int64
	Message       string
	FirstDriver   string
	SecondDriver  string
	ThirdDriver   string
	LicensePoints int32
	CreatedDate   time.Time
}

func (q *Queries) SelectListNotifications(ctx context.Context, arg SelectListNotificationsParams) ([]SelectListNotificationsRow, error) {
	rows, err := q.query(ctx, q.selectListNotificationsStmt, selectListNotifications, arg.Column1, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectListNotificationsRow{}
	for rows.Next() {
		var i SelectListNotificationsRow
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.FirstDriver,
			&i.SecondDriver,
			&i.ThirdDriver,
			&i.LicensePoints,
			&i.CreatedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNotification = `-- name: UpdateNotification :exec
UPDATE notification SET 
    message = COALESCE($1::VARCHAR, message), 
    first_driver = COALESCE($2::VARCHAR, first_driver),
    second_driver = COALESCE($3::VARCHAR, second_driver),
    third_driver = COALESCE($4::VARCHAR, third_driver),
    license_points = COALESCE($5::INTEGER, license_points)
WHERE id = $6::BIGINT
`

type UpdateNotificationParams struct {
	Message       string
	FirstDriver   string
	SecondDriver  string
	ThirdDriver   string
	LicensePoints int32
	ID            int64
}

func (q *Queries) UpdateNotification(ctx context.Context, arg UpdateNotificationParams) error {
	_, err := q.exec(ctx, q.updateNotificationStmt, updateNotification,
		arg.Message,
		arg.FirstDriver,
		arg.SecondDriver,
		arg.ThirdDriver,
		arg.LicensePoints,
		arg.ID,
	)
	return err
}
