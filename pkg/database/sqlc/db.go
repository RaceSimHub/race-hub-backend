// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.deleteNotificationStmt, err = db.PrepareContext(ctx, deleteNotification); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteNotification: %w", err)
	}
	if q.getLastNotificationMessageStmt, err = db.PrepareContext(ctx, getLastNotificationMessage); err != nil {
		return nil, fmt.Errorf("error preparing query GetLastNotificationMessage: %w", err)
	}
	if q.insertNotificationStmt, err = db.PrepareContext(ctx, insertNotification); err != nil {
		return nil, fmt.Errorf("error preparing query InsertNotification: %w", err)
	}
	if q.selectListNotificationsStmt, err = db.PrepareContext(ctx, selectListNotifications); err != nil {
		return nil, fmt.Errorf("error preparing query SelectListNotifications: %w", err)
	}
	if q.updateNotificationStmt, err = db.PrepareContext(ctx, updateNotification); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNotification: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.deleteNotificationStmt != nil {
		if cerr := q.deleteNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteNotificationStmt: %w", cerr)
		}
	}
	if q.getLastNotificationMessageStmt != nil {
		if cerr := q.getLastNotificationMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLastNotificationMessageStmt: %w", cerr)
		}
	}
	if q.insertNotificationStmt != nil {
		if cerr := q.insertNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertNotificationStmt: %w", cerr)
		}
	}
	if q.selectListNotificationsStmt != nil {
		if cerr := q.selectListNotificationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing selectListNotificationsStmt: %w", cerr)
		}
	}
	if q.updateNotificationStmt != nil {
		if cerr := q.updateNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNotificationStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                             DBTX
	tx                             *sql.Tx
	deleteNotificationStmt         *sql.Stmt
	getLastNotificationMessageStmt *sql.Stmt
	insertNotificationStmt         *sql.Stmt
	selectListNotificationsStmt    *sql.Stmt
	updateNotificationStmt         *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                             tx,
		tx:                             tx,
		deleteNotificationStmt:         q.deleteNotificationStmt,
		getLastNotificationMessageStmt: q.getLastNotificationMessageStmt,
		insertNotificationStmt:         q.insertNotificationStmt,
		selectListNotificationsStmt:    q.selectListNotificationsStmt,
		updateNotificationStmt:         q.updateNotificationStmt,
	}
}
