// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/RaceSimHub/race-hub-backend/internal/service/driver (interfaces: Contract)
//
// Generated by this command:
//
//	mockgen -destination=./mock/driver_mock.go -package=mock . Contract
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	sqlc "github.com/RaceSimHub/race-hub-backend/internal/database/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockContract is a mock of Contract interface.
type MockContract struct {
	ctrl     *gomock.Controller
	recorder *MockContractMockRecorder
	isgomock struct{}
}

// MockContractMockRecorder is the mock recorder for MockContract.
type MockContractMockRecorder struct {
	mock *MockContract
}

// NewMockContract creates a new mock instance.
func NewMockContract(ctrl *gomock.Controller) *MockContract {
	mock := &MockContract{ctrl: ctrl}
	mock.recorder = &MockContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContract) EXPECT() *MockContractMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockContract) Create(name, raceName, email, phone string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name, raceName, email, phone)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockContractMockRecorder) Create(name, raceName, email, phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContract)(nil).Create), name, raceName, email, phone)
}

// Delete mocks base method.
func (m *MockContract) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockContractMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockContract)(nil).Delete), id)
}

// GetByID mocks base method.
func (m *MockContract) GetByID(id int) (sqlc.GetDriverRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(sqlc.GetDriverRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockContractMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockContract)(nil).GetByID), id)
}

// GetList mocks base method.
func (m *MockContract) GetList(offset, limit int) ([]sqlc.SelectListDriversRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", offset, limit)
	ret0, _ := ret[0].([]sqlc.SelectListDriversRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockContractMockRecorder) GetList(offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockContract)(nil).GetList), offset, limit)
}

// Update mocks base method.
func (m *MockContract) Update(id int, name, raceName, email, phone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, name, raceName, email, phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockContractMockRecorder) Update(id, name, raceName, email, phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockContract)(nil).Update), id, name, raceName, email, phone)
}
