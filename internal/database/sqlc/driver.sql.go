// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: driver.sql

package sqlc

import (
	"context"
	"time"
)

const deleteDriver = `-- name: DeleteDriver :exec
DELETE FROM 
    driver
WHERE 
    id = $1::BIGINT
`

func (q *Queries) DeleteDriver(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteDriverStmt, deleteDriver, id)
	return err
}

const getDriver = `-- name: GetDriver :one
SELECT 
    id::BIGINT,
    name::VARCHAR,
    race_name::VARCHAR,
    email::VARCHAR,
    phone::VARCHAR,
    fk_created_by_user_id::BIGINT,
    fk_updated_by_user_id::BIGINT,
    created_date::TIMESTAMP,
    updated_date::TIMESTAMP
FROM
    driver
WHERE id = $1::BIGINT
`

type GetDriverRow struct {
	ID                int64
	Name              string
	RaceName          string
	Email             string
	Phone             string
	FkCreatedByUserID int64
	FkUpdatedByUserID int64
	CreatedDate       time.Time
	UpdatedDate       time.Time
}

func (q *Queries) GetDriver(ctx context.Context, dollar_1 int64) (GetDriverRow, error) {
	row := q.queryRow(ctx, q.getDriverStmt, getDriver, dollar_1)
	var i GetDriverRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RaceName,
		&i.Email,
		&i.Phone,
		&i.FkCreatedByUserID,
		&i.FkUpdatedByUserID,
		&i.CreatedDate,
		&i.UpdatedDate,
	)
	return i, err
}

const insertDriver = `-- name: InsertDriver :one
INSERT INTO driver (
    name,
    race_name,
    email,
    phone,
    fk_created_by_user_id,
    created_date
) VALUES (
    $1::VARCHAR,
    $2::VARCHAR,
    $3::VARCHAR,
    $4::VARCHAR,
    $5::BIGINT,
    $6::TIMESTAMP
) RETURNING id
`

type InsertDriverParams struct {
	Name              string
	RaceName          string
	Email             string
	Phone             string
	FkCreatedByUserID int64
	CreatedDate       time.Time
}

func (q *Queries) InsertDriver(ctx context.Context, arg InsertDriverParams) (int64, error) {
	row := q.queryRow(ctx, q.insertDriverStmt, insertDriver,
		arg.Name,
		arg.RaceName,
		arg.Email,
		arg.Phone,
		arg.FkCreatedByUserID,
		arg.CreatedDate,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectListDrivers = `-- name: SelectListDrivers :many
SELECT 
    id::BIGINT,
    name::VARCHAR
FROM
    driver
OFFSET $1::INTEGER
LIMIT $2::INTEGER
`

type SelectListDriversParams struct {
	Column1 int32
	Column2 int32
}

type SelectListDriversRow struct {
	ID   int64
	Name string
}

func (q *Queries) SelectListDrivers(ctx context.Context, arg SelectListDriversParams) ([]SelectListDriversRow, error) {
	rows, err := q.query(ctx, q.selectListDriversStmt, selectListDrivers, arg.Column1, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectListDriversRow{}
	for rows.Next() {
		var i SelectListDriversRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDriver = `-- name: UpdateDriver :exec
UPDATE driver SET 
    name = COALESCE($1::VARCHAR, name),
    race_name = COALESCE($2::VARCHAR, race_name),
    email = COALESCE($3::VARCHAR, email),
    phone = COALESCE($4::VARCHAR, phone),
    fk_updated_by_user_id = $5::BIGINT,
    updated_date = $6::TIMESTAMP
WHERE id = $7::BIGINT
`

type UpdateDriverParams struct {
	Name              string
	RaceName          string
	Email             string
	Phone             string
	FkUpdatedByUserID int64
	UpdatedDate       time.Time
	ID                int64
}

func (q *Queries) UpdateDriver(ctx context.Context, arg UpdateDriverParams) error {
	_, err := q.exec(ctx, q.updateDriverStmt, updateDriver,
		arg.Name,
		arg.RaceName,
		arg.Email,
		arg.Phone,
		arg.FkUpdatedByUserID,
		arg.UpdatedDate,
		arg.ID,
	)
	return err
}
