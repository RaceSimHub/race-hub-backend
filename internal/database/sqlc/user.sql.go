// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package sqlc

import (
	"context"
)

const insertUser = `-- name: InsertUser :one
INSERT INTO "user" (
    email,
    name,
    password,
    created_date
) VALUES (
    $1::VARCHAR,
    $2::VARCHAR,
    $3::VARCHAR,
    now()
) RETURNING id
`

type InsertUserParams struct {
	Email    string
	Name     string
	Password string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int64, error) {
	row := q.queryRow(ctx, q.insertUserStmt, insertUser, arg.Email, arg.Name, arg.Password)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectUserIDAndPasswordByEmail = `-- name: SelectUserIDAndPasswordByEmail :one
SELECT
    id::BIGINT,
    password::VARCHAR
FROM
    "user"
WHERE
    email = $1::VARCHAR
`

type SelectUserIDAndPasswordByEmailRow struct {
	ID       int64
	Password string
}

func (q *Queries) SelectUserIDAndPasswordByEmail(ctx context.Context, email string) (SelectUserIDAndPasswordByEmailRow, error) {
	row := q.queryRow(ctx, q.selectUserIDAndPasswordByEmailStmt, selectUserIDAndPasswordByEmail, email)
	var i SelectUserIDAndPasswordByEmailRow
	err := row.Scan(&i.ID, &i.Password)
	return i, err
}
