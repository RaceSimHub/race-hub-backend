// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.deleteNotificationStmt, err = db.PrepareContext(ctx, deleteNotification); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteNotification: %w", err)
	}
	if q.deleteTrackStmt, err = db.PrepareContext(ctx, deleteTrack); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTrack: %w", err)
	}
	if q.getLastNotificationMessageStmt, err = db.PrepareContext(ctx, getLastNotificationMessage); err != nil {
		return nil, fmt.Errorf("error preparing query GetLastNotificationMessage: %w", err)
	}
	if q.insertNotificationStmt, err = db.PrepareContext(ctx, insertNotification); err != nil {
		return nil, fmt.Errorf("error preparing query InsertNotification: %w", err)
	}
	if q.insertTrackStmt, err = db.PrepareContext(ctx, insertTrack); err != nil {
		return nil, fmt.Errorf("error preparing query InsertTrack: %w", err)
	}
	if q.insertUserStmt, err = db.PrepareContext(ctx, insertUser); err != nil {
		return nil, fmt.Errorf("error preparing query InsertUser: %w", err)
	}
	if q.selectListNotificationsStmt, err = db.PrepareContext(ctx, selectListNotifications); err != nil {
		return nil, fmt.Errorf("error preparing query SelectListNotifications: %w", err)
	}
	if q.selectListTracksStmt, err = db.PrepareContext(ctx, selectListTracks); err != nil {
		return nil, fmt.Errorf("error preparing query SelectListTracks: %w", err)
	}
	if q.selectUserIDAndPasswordByEmailStmt, err = db.PrepareContext(ctx, selectUserIDAndPasswordByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query SelectUserIDAndPasswordByEmail: %w", err)
	}
	if q.updateNotificationStmt, err = db.PrepareContext(ctx, updateNotification); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNotification: %w", err)
	}
	if q.updateTrackStmt, err = db.PrepareContext(ctx, updateTrack); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTrack: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.deleteNotificationStmt != nil {
		if cerr := q.deleteNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteNotificationStmt: %w", cerr)
		}
	}
	if q.deleteTrackStmt != nil {
		if cerr := q.deleteTrackStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTrackStmt: %w", cerr)
		}
	}
	if q.getLastNotificationMessageStmt != nil {
		if cerr := q.getLastNotificationMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLastNotificationMessageStmt: %w", cerr)
		}
	}
	if q.insertNotificationStmt != nil {
		if cerr := q.insertNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertNotificationStmt: %w", cerr)
		}
	}
	if q.insertTrackStmt != nil {
		if cerr := q.insertTrackStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertTrackStmt: %w", cerr)
		}
	}
	if q.insertUserStmt != nil {
		if cerr := q.insertUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertUserStmt: %w", cerr)
		}
	}
	if q.selectListNotificationsStmt != nil {
		if cerr := q.selectListNotificationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing selectListNotificationsStmt: %w", cerr)
		}
	}
	if q.selectListTracksStmt != nil {
		if cerr := q.selectListTracksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing selectListTracksStmt: %w", cerr)
		}
	}
	if q.selectUserIDAndPasswordByEmailStmt != nil {
		if cerr := q.selectUserIDAndPasswordByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing selectUserIDAndPasswordByEmailStmt: %w", cerr)
		}
	}
	if q.updateNotificationStmt != nil {
		if cerr := q.updateNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNotificationStmt: %w", cerr)
		}
	}
	if q.updateTrackStmt != nil {
		if cerr := q.updateTrackStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTrackStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                 DBTX
	tx                                 *sql.Tx
	deleteNotificationStmt             *sql.Stmt
	deleteTrackStmt                    *sql.Stmt
	getLastNotificationMessageStmt     *sql.Stmt
	insertNotificationStmt             *sql.Stmt
	insertTrackStmt                    *sql.Stmt
	insertUserStmt                     *sql.Stmt
	selectListNotificationsStmt        *sql.Stmt
	selectListTracksStmt               *sql.Stmt
	selectUserIDAndPasswordByEmailStmt *sql.Stmt
	updateNotificationStmt             *sql.Stmt
	updateTrackStmt                    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                 tx,
		tx:                                 tx,
		deleteNotificationStmt:             q.deleteNotificationStmt,
		deleteTrackStmt:                    q.deleteTrackStmt,
		getLastNotificationMessageStmt:     q.getLastNotificationMessageStmt,
		insertNotificationStmt:             q.insertNotificationStmt,
		insertTrackStmt:                    q.insertTrackStmt,
		insertUserStmt:                     q.insertUserStmt,
		selectListNotificationsStmt:        q.selectListNotificationsStmt,
		selectListTracksStmt:               q.selectListTracksStmt,
		selectUserIDAndPasswordByEmailStmt: q.selectUserIDAndPasswordByEmailStmt,
		updateNotificationStmt:             q.updateNotificationStmt,
		updateTrackStmt:                    q.updateTrackStmt,
	}
}
