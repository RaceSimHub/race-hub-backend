// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/RaceSimHub/race-hub-backend/internal/database/sqlc (interfaces: Querier)
//
// Generated by this command:
//
//	mockgen . Querier
//

// Package mock_sqlc is a generated GoMock package.
package mock_sqlc

import (
	context "context"
	reflect "reflect"

	sqlc "github.com/RaceSimHub/race-hub-backend/internal/database/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// DeleteDriver mocks base method.
func (m *MockQuerier) DeleteDriver(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDriver", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDriver indicates an expected call of DeleteDriver.
func (mr *MockQuerierMockRecorder) DeleteDriver(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDriver", reflect.TypeOf((*MockQuerier)(nil).DeleteDriver), ctx, id)
}

// DeleteNotification mocks base method.
func (m *MockQuerier) DeleteNotification(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotification", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotification indicates an expected call of DeleteNotification.
func (mr *MockQuerierMockRecorder) DeleteNotification(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotification", reflect.TypeOf((*MockQuerier)(nil).DeleteNotification), ctx, id)
}

// DeleteTrack mocks base method.
func (m *MockQuerier) DeleteTrack(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrack", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrack indicates an expected call of DeleteTrack.
func (mr *MockQuerierMockRecorder) DeleteTrack(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrack", reflect.TypeOf((*MockQuerier)(nil).DeleteTrack), ctx, id)
}

// GetDriver mocks base method.
func (m *MockQuerier) GetDriver(ctx context.Context, dollar_1 int64) (sqlc.GetDriverRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriver", ctx, dollar_1)
	ret0, _ := ret[0].(sqlc.GetDriverRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDriver indicates an expected call of GetDriver.
func (mr *MockQuerierMockRecorder) GetDriver(ctx, dollar_1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriver", reflect.TypeOf((*MockQuerier)(nil).GetDriver), ctx, dollar_1)
}

// GetLastNotificationMessage mocks base method.
func (m *MockQuerier) GetLastNotificationMessage(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastNotificationMessage", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastNotificationMessage indicates an expected call of GetLastNotificationMessage.
func (mr *MockQuerierMockRecorder) GetLastNotificationMessage(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastNotificationMessage", reflect.TypeOf((*MockQuerier)(nil).GetLastNotificationMessage), ctx)
}

// InsertDriver mocks base method.
func (m *MockQuerier) InsertDriver(ctx context.Context, arg sqlc.InsertDriverParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDriver", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertDriver indicates an expected call of InsertDriver.
func (mr *MockQuerierMockRecorder) InsertDriver(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDriver", reflect.TypeOf((*MockQuerier)(nil).InsertDriver), ctx, arg)
}

// InsertNotification mocks base method.
func (m *MockQuerier) InsertNotification(ctx context.Context, arg sqlc.InsertNotificationParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNotification", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertNotification indicates an expected call of InsertNotification.
func (mr *MockQuerierMockRecorder) InsertNotification(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNotification", reflect.TypeOf((*MockQuerier)(nil).InsertNotification), ctx, arg)
}

// InsertTrack mocks base method.
func (m *MockQuerier) InsertTrack(ctx context.Context, arg sqlc.InsertTrackParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTrack", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTrack indicates an expected call of InsertTrack.
func (mr *MockQuerierMockRecorder) InsertTrack(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTrack", reflect.TypeOf((*MockQuerier)(nil).InsertTrack), ctx, arg)
}

// InsertUser mocks base method.
func (m *MockQuerier) InsertUser(ctx context.Context, arg sqlc.InsertUserParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockQuerierMockRecorder) InsertUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockQuerier)(nil).InsertUser), ctx, arg)
}

// SelectListDrivers mocks base method.
func (m *MockQuerier) SelectListDrivers(ctx context.Context, arg sqlc.SelectListDriversParams) ([]sqlc.SelectListDriversRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectListDrivers", ctx, arg)
	ret0, _ := ret[0].([]sqlc.SelectListDriversRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectListDrivers indicates an expected call of SelectListDrivers.
func (mr *MockQuerierMockRecorder) SelectListDrivers(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectListDrivers", reflect.TypeOf((*MockQuerier)(nil).SelectListDrivers), ctx, arg)
}

// SelectListNotifications mocks base method.
func (m *MockQuerier) SelectListNotifications(ctx context.Context, arg sqlc.SelectListNotificationsParams) ([]sqlc.SelectListNotificationsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectListNotifications", ctx, arg)
	ret0, _ := ret[0].([]sqlc.SelectListNotificationsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectListNotifications indicates an expected call of SelectListNotifications.
func (mr *MockQuerierMockRecorder) SelectListNotifications(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectListNotifications", reflect.TypeOf((*MockQuerier)(nil).SelectListNotifications), ctx, arg)
}

// SelectListTracks mocks base method.
func (m *MockQuerier) SelectListTracks(ctx context.Context, arg sqlc.SelectListTracksParams) ([]sqlc.SelectListTracksRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectListTracks", ctx, arg)
	ret0, _ := ret[0].([]sqlc.SelectListTracksRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectListTracks indicates an expected call of SelectListTracks.
func (mr *MockQuerierMockRecorder) SelectListTracks(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectListTracks", reflect.TypeOf((*MockQuerier)(nil).SelectListTracks), ctx, arg)
}

// SelectTrackById mocks base method.
func (m *MockQuerier) SelectTrackById(ctx context.Context, dollar_1 int64) (sqlc.SelectTrackByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTrackById", ctx, dollar_1)
	ret0, _ := ret[0].(sqlc.SelectTrackByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTrackById indicates an expected call of SelectTrackById.
func (mr *MockQuerierMockRecorder) SelectTrackById(ctx, dollar_1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTrackById", reflect.TypeOf((*MockQuerier)(nil).SelectTrackById), ctx, dollar_1)
}

// SelectUserIDAndPasswordByEmail mocks base method.
func (m *MockQuerier) SelectUserIDAndPasswordByEmail(ctx context.Context, email string) (sqlc.SelectUserIDAndPasswordByEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserIDAndPasswordByEmail", ctx, email)
	ret0, _ := ret[0].(sqlc.SelectUserIDAndPasswordByEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserIDAndPasswordByEmail indicates an expected call of SelectUserIDAndPasswordByEmail.
func (mr *MockQuerierMockRecorder) SelectUserIDAndPasswordByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserIDAndPasswordByEmail", reflect.TypeOf((*MockQuerier)(nil).SelectUserIDAndPasswordByEmail), ctx, email)
}

// UpdateDriver mocks base method.
func (m *MockQuerier) UpdateDriver(ctx context.Context, arg sqlc.UpdateDriverParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDriver", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDriver indicates an expected call of UpdateDriver.
func (mr *MockQuerierMockRecorder) UpdateDriver(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDriver", reflect.TypeOf((*MockQuerier)(nil).UpdateDriver), ctx, arg)
}

// UpdateNotification mocks base method.
func (m *MockQuerier) UpdateNotification(ctx context.Context, arg sqlc.UpdateNotificationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotification", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotification indicates an expected call of UpdateNotification.
func (mr *MockQuerierMockRecorder) UpdateNotification(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotification", reflect.TypeOf((*MockQuerier)(nil).UpdateNotification), ctx, arg)
}

// UpdateTrack mocks base method.
func (m *MockQuerier) UpdateTrack(ctx context.Context, arg sqlc.UpdateTrackParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrack", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrack indicates an expected call of UpdateTrack.
func (mr *MockQuerierMockRecorder) UpdateTrack(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrack", reflect.TypeOf((*MockQuerier)(nil).UpdateTrack), ctx, arg)
}
